{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.splitStyles = splitStyles;\n  /**\n   * Utility function to extract styles in separate objects\n   *\n   * @param styles The style object you want to filter\n   * @param filters The filters by which you want to split the styles\n   * @returns An array of filtered style objects:\n   * - The first style object contains the properties that didn't match any filter\n   * - After that there will be a style object for each filter you passed in the same order as the matching filters\n   * - A style property will exist in a single style object, the first filter it matched\n   */\n  function splitStyles(styles) {\n    for (var _len = arguments.length, filters = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      filters[_key - 1] = arguments[_key];\n    }\n    if (process.env.NODE_ENV !== 'production' && filters.length === 0) {\n      console.error('No filters were passed when calling splitStyles');\n    }\n\n    // `Object.entries` will be used to iterate over the styles and `Object.fromEntries` will be called before returning\n    // Entries which match the given filters will be temporarily stored in `newStyles`\n    var newStyles = filters.map(() => []);\n\n    // Entries which match no filter\n    var rest = [];\n\n    // Iterate every style property\n    outer: for (var item of Object.entries(styles)) {\n      // Check each filter\n      for (var i = 0; i < filters.length; i++) {\n        // Check if filter matches\n        if (filters[i](item[0])) {\n          newStyles[i].push(item); // Push to temporary filtered entries array\n          continue outer; // Skip to checking next style property\n        }\n      }\n\n      // Adds to rest styles if not filtered\n      rest.push(item);\n    }\n\n    // Put unmatched styles in the beginning\n    newStyles.unshift(rest);\n\n    // Convert arrays of entries into objects\n    return newStyles.map(styles => Object.fromEntries(styles));\n  }\n});","lineCount":52,"map":[[6,2,12,0],[7,0,13,0],[8,0,14,0],[9,0,15,0],[10,0,16,0],[11,0,17,0],[12,0,18,0],[13,0,19,0],[14,0,20,0],[15,0,21,0],[16,2,22,7],[16,11,22,16,"splitStyles"],[16,22,22,27,"splitStyles"],[16,23,23,2,"styles"],[16,29,23,19],[16,31,25,2],[17,4,25,2],[17,13,25,2,"_len"],[17,17,25,2],[17,20,25,2,"arguments"],[17,29,25,2],[17,30,25,2,"length"],[17,36,25,2],[17,38,24,5,"filters"],[17,45,24,12],[17,52,24,12,"Array"],[17,57,24,12],[17,58,24,12,"_len"],[17,62,24,12],[17,69,24,12,"_len"],[17,73,24,12],[17,84,24,12,"_key"],[17,88,24,12],[17,94,24,12,"_key"],[17,98,24,12],[17,101,24,12,"_len"],[17,105,24,12],[17,107,24,12,"_key"],[17,111,24,12],[18,6,24,5,"filters"],[18,13,24,12],[18,14,24,12,"_key"],[18,18,24,12],[18,26,24,12,"arguments"],[18,35,24,12],[18,36,24,12,"_key"],[18,40,24,12],[19,4,24,12],[20,4,26,2],[20,8,26,6,"process"],[20,15,26,13],[20,16,26,14,"env"],[20,19,26,17],[20,20,26,18,"NODE_ENV"],[20,28,26,26],[20,33,26,31],[20,45,26,43],[20,49,26,47,"filters"],[20,56,26,54],[20,57,26,55,"length"],[20,63,26,61],[20,68,26,66],[20,69,26,67],[20,71,26,69],[21,6,27,4,"console"],[21,13,27,11],[21,14,27,12,"error"],[21,19,27,17],[21,20,27,18],[21,69,27,67],[21,70,27,68],[22,4,28,2],[24,4,30,2],[25,4,31,2],[26,4,32,2],[26,8,32,8,"newStyles"],[26,17,32,17],[26,20,32,20,"filters"],[26,27,32,27],[26,28,32,28,"map"],[26,31,32,31],[26,32,32,32],[26,38,32,38],[26,40,32,51],[26,41,32,52],[28,4,34,2],[29,4,35,2],[29,8,35,8,"rest"],[29,12,35,21],[29,15,35,24],[29,17,35,26],[31,4,37,2],[32,4,38,2,"outer"],[32,9,38,7],[32,11,38,9],[32,16,38,14],[32,20,38,20,"item"],[32,24,38,24],[32,28,38,28,"Object"],[32,34,38,34],[32,35,38,35,"entries"],[32,42,38,42],[32,43,38,43,"styles"],[32,49,38,49],[32,50,38,50],[32,52,38,63],[33,6,39,4],[34,6,40,4],[34,11,40,9],[34,15,40,13,"i"],[34,16,40,14],[34,19,40,17],[34,20,40,18],[34,22,40,20,"i"],[34,23,40,21],[34,26,40,24,"filters"],[34,33,40,31],[34,34,40,32,"length"],[34,40,40,38],[34,42,40,40,"i"],[34,43,40,41],[34,45,40,43],[34,47,40,45],[35,8,41,6],[36,8,42,6],[36,12,42,10,"filters"],[36,19,42,17],[36,20,42,18,"i"],[36,21,42,19],[36,22,42,20],[36,23,42,21,"item"],[36,27,42,25],[36,28,42,26],[36,29,42,27],[36,30,42,28],[36,31,42,29],[36,33,42,31],[37,10,43,8,"newStyles"],[37,19,43,17],[37,20,43,18,"i"],[37,21,43,19],[37,22,43,20],[37,23,43,21,"push"],[37,27,43,25],[37,28,43,26,"item"],[37,32,43,30],[37,33,43,31],[37,34,43,32],[37,35,43,33],[38,10,44,8],[38,19,44,17,"outer"],[38,24,44,22],[38,25,44,23],[38,26,44,24],[39,8,45,6],[40,6,46,4],[42,6,48,4],[43,6,49,4,"rest"],[43,10,49,8],[43,11,49,9,"push"],[43,15,49,13],[43,16,49,14,"item"],[43,20,49,18],[43,21,49,19],[44,4,50,2],[46,4,52,2],[47,4,53,2,"newStyles"],[47,13,53,11],[47,14,53,12,"unshift"],[47,21,53,19],[47,22,53,20,"rest"],[47,26,53,24],[47,27,53,25],[49,4,55,2],[50,4,56,2],[50,11,56,9,"newStyles"],[50,20,56,18],[50,21,56,19,"map"],[50,24,56,22],[50,25,56,24,"styles"],[50,31,56,30],[50,35,56,35,"Object"],[50,41,56,41],[50,42,56,42,"fromEntries"],[50,53,56,53],[50,54,56,54,"styles"],[50,60,56,60],[50,61,56,61],[50,62,56,62],[51,2,60,0],[52,0,60,1],[52,3]],"functionMap":{"names":["<global>","splitStyles","filters.map$argument_0","newStyles.map$argument_0"],"mappings":"AAA;OCqB;gCCU,mBD;uBEwB,sCF;CDI"}},"type":"js/module"}]}